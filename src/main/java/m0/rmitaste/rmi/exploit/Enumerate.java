package m0.rmitaste.rmi.exploit;
import m0.rmitaste.rmi.RmiObject;
import m0.rmitaste.rmi.RmiRegistry;
import m0.rmitaste.rmi.RmiTarget;
import m0.rmitaste.rmi.payload.BasicGenerator;
import m0.rmitaste.utils.SimpleLogger;

import java.util.logging.Logger;

/**
 * Enumerate class allows to:
 * - connect to RMI Service;
 * - enumerate RMI Service and get information such as: remote object name, interfaces that remote object implements, classes that remote object extends.
 *
 * @author Marcin Ogorzelski (mzero - @_mzer0)
 */
public class Enumerate {
    // Logger
    private static Logger logger = SimpleLogger.getLog();
    private RmiRegistry registry;


    public Enumerate(RmiRegistry rmiRegistry){
        this.registry = rmiRegistry;
    }

    public Enumerate(String host, int port){
        this.registry = new RmiRegistry(host, port);
    }


    /**
     * Connects to RMI service and returns RmiRegistry object which has reference to remote registry.
     * @param host host for the remote registry
     * @param port port on which the registry accepts requests
     * @return RmiRegistry object that has reference to remote registry.
     * @throws Throwable
     */
    public static RmiRegistry connect(String host, int port) throws Throwable{
        // Try to connect to RMI registry
        try {
            // Connect
            RmiRegistry rmiRegistry = RmiTarget.connect(host, port);
            logger.info("Connected to "+host+":"+port);
            System.out.println("Connected to RMI registry on "+host+":"+port);
        }
        catch (java.rmi.ConnectIOException e){
            logger.warning("Could not connect to: "+host+":"+port+". Provided address and port is not RMI service!");
            System.out.println("Could not connect to: "+host+":"+port+". Provided address and port is not RMI service!");
            System.exit(1);
        }
        catch (java.rmi.ConnectException e){
            logger.warning("Could not connect to: "+host+":"+port+". Check address and port!");
            System.out.println("Could not connect to: "+host+":"+port+". Check address and port!");
            System.exit(1);
        }
        return null;
    }

    /**
     * Connects to RMI service and returns RmiRegistry object which has reference to remote registry.
     * @param rmiRegistry RmiRegistry object that has host and port attributes set
     * @return RmiRegistry object that has reference to remote registry.
     * @throws Throwable
     */
    public static RmiRegistry connect(RmiRegistry rmiRegistry) throws Throwable{
        // Try to connect to RMI registry
        try {
            // Connect
            RmiRegistry registry = RmiTarget.connect(rmiRegistry);
            logger.info("Connected to RMI registry on  "+rmiRegistry.getHost()+":"+rmiRegistry.getPort());
            System.out.println("Connected to RMI registry on "+rmiRegistry.getHost()+":"+rmiRegistry.getPort());
            return registry;
        }
        catch (java.rmi.ConnectIOException e){
            logger.warning("Could not connect to: "+rmiRegistry.getHost()+":"+rmiRegistry.getPort()+". Provided address and port is not RMI service!");
            System.out.println("Could not connect to: "+rmiRegistry.getHost()+":"+rmiRegistry.getPort()+". Provided address and port is not RMI service!");
            System.exit(1);
        }
        catch (java.rmi.ConnectException e){
            logger.warning("Could not connect to: "+rmiRegistry.getHost()+":"+rmiRegistry.getPort()+". Check address and port!");
            System.out.println("Could not connect to: "+rmiRegistry.getHost()+":"+rmiRegistry.getPort()+". Check address and port!");
            System.exit(1);
        }
        return null;
    }

    /**
     * Enumerates RMI registry
     * @throws Throwable
     */
    public void enumerate() throws Throwable{
        // Connect
        this.registry = Enumerate.connect(this.registry);
        // Get object names and corresponding classes
        this.registry.loadObjects();
        // Get references to objects
        this.registry.loadObjectRef();
    }

    /**
     * Returns RmiRegistry object being enumerated
     * @return
     */
    public RmiRegistry getRegistry() {
        return registry;
    }

    public String toString(){
        return this.registry.toString();
    }
}
